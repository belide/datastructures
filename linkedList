
function LinkedList() { // A LinkedList constructor function

  //These are all private variables(and not properties)that we will need later 
  let length = 0,  
      head = null, 
      list = [];   
  let Node = function(element){ 
    this.element = element; 
    this.next = null;
  }; 



  
//All methods assigned as properties (because of use of this keyword of the linkedList class). All private variables are 
//accessible outside the constructor scope through function invocation. Otherwise the values do not update.  

  this.head = function(){
    return head; 
  }; 
  
  
  this.node = function(entry){
   return new Node(entry);
  }; 
  
  
  this.size = function(){
    return length; 
  }; 
  
  
  this.content = function(){
    return list; 
  }; 
  


//All functions that require an argument to make changes to the values of the private variables. 

  this.add = function(element){
    length ++;
    const item = new Node(element); 
    if (!head){
      head = item; 
      list.push(head); 
    } else{
      list.push(item);
      list[length-2].next = item;
    }
  };
  
  
  this.remove = function (input) { 
    const indexOfElementInList = list.map((entry) => entry.element)
          .findIndex((elm) => elm === input);     
    if (indexOfElementInList > 0 && indexOfElementInList === list.length-1){
    list[indexOfElementInList -1].next = null;  
    list.splice(indexOfElementInList, 1); 
    length = length -1;      
  } if (indexOfElementInList > 0 && indexOfElementInList !== list.length-1){
    list[indexOfElementInList -1].next = list[indexOfElementInList + 1];  
    list.splice(indexOfElementInList, 1); 
    length = length -1;    
  } if (indexOfElementInList === 0 && list.length > 1){
      head = list[indexOfElementInList + 1]; 
      list.splice(indexOfElementInList, 1);
      length = length-1; 
   } if (indexOfElementInList === 0 && list.length === 1){
      head = null; 
      list.splice(0, 1);
      length = 0;
    } 
  }
  
  
 this.indexOf = function(input){
    return list.map((entry) => entry.element)
          .findIndex((elm) => elm === input); 
  }
  
}
  
